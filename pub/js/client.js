// Generated by CoffeeScript 1.3.3
(function() {
  var BorrowerInfoView, Loan, LoanView, Loans, LoansList, Partner, Partners, PledgesList, Router, SearchView, ThanksView, TopBar, WikiView, w,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  w = window;

  Backbone.View.prototype.open = function(parentEl) {
    if (parentEl == null) {
      parentEl = '.main';
    }
    this.$el.appendTo(parentEl);
    return this;
  };

  w.wait = function(someTime, thenDo) {
    return setTimeout(thenDo, someTime);
  };

  w.doEvery = function(someTime, action) {
    return setInterval(action, someTime);
  };

  Loan = (function(_super) {

    __extends(Loan, _super);

    function Loan() {
      return Loan.__super__.constructor.apply(this, arguments);
    }

    Loan.prototype.initialize = function() {
      var _this = this;
      return this.on('change:pledge', function() {
        return _this.collection.trigger('update:pledgeTotal', _this.collection.pledgeCount(), _this.collection.pledgeTotal());
      });
    };

    Loan.prototype.profileImage = function() {
      return "http://www.kiva.org/img/s100/" + (this.get('image').id) + ".jpg";
    };

    Loan.prototype.profileImageLarge = function() {
      return "http://www.kiva.org/img/s300/" + (this.get('image').id) + ".jpg";
    };

    Loan.prototype.countryCode = function() {
      return this.get('location').country_code;
    };

    Loan.prototype.percFunded = function(withHelp) {
      if (withHelp == null) {
        withHelp = 0;
      }
      return Math.floor((this.get('funded_amount') + withHelp) * 100 / this.get('loan_amount'));
    };

    Loan.prototype.pledge = function() {
      return parseInt(this.get('pledge'), 10);
    };

    Loan.prototype.sectorActivity = function() {
      var activity, sector;
      return "" + ((sector = this.get('sector')) !== (activity = this.get('activity')) ? sector + ': ' : '') + activity;
    };

    Loan.prototype.latLong = function() {
      return this.get('location').geo.pairs.split(' ');
    };

    Loan.prototype.partner = function() {
      return app.partners.get(this.get('partner_id'));
    };

    Loan.prototype.pDelinquency = function() {
      var dr;
      dr = this.partner().get('delinquency_rate');
      return (Math.round(dr * 10)) / 10;
    };

    Loan.prototype.pDefault = function() {
      var dr;
      dr = this.partner().get('default_rate');
      return Math.round((dr * 10) / 10);
    };

    Loan.prototype.place = function() {
      var town;
      return "" + ((town = this.get('location').town) ? town + ', ' : '') + (this.get('location').country);
    };

    Loan.prototype.validate = function(attrs) {
      var ok;
      ok = /(''|^[0-9]+$)/.test(attrs.pledge);
      if (!ok) {
        return 'not a number';
      }
    };

    Loan.prototype.matches = function(term) {
      var fieldsToSearch, re;
      re = RegExp(term, 'gi');
      fieldsToSearch = this.get('name') + this.get('activity') + this.get('use') + this.get('location').country;
      return re.test(fieldsToSearch);
    };

    return Loan;

  })(Backbone.Model);

  Loans = (function(_super) {

    __extends(Loans, _super);

    function Loans() {
      return Loans.__super__.constructor.apply(this, arguments);
    }

    Loans.prototype.model = Loan;

    Loans.prototype.url = 'http://api.kivaws.org/v1/loans/newest.json';

    Loans.prototype.initialize = function() {
      var checkForNewLoans,
        _this = this;
      this.latestLoad = moment().valueOf();
      this.page = 1;
      this.searchTypeAheadTerms = [];
      checkForNewLoans = doEvery(10000, function() {
        return _this.fetch({
          add: true
        });
      });
      return this.on('pledge:save', function() {
        return window.localStorage.setItem('kivaPledges', JSON.stringify(_this.pledgesToSave()));
      });
    };

    Loans.prototype.restorePledges = function(cb) {
      var oldUrl, prevPledges,
        _this = this;
      if (window.localStorage.kivaPledges) {
        prevPledges = JSON.parse(typeof localStorage !== "undefined" && localStorage !== null ? localStorage.getItem('kivaPledges') : void 0);
        if (_.keys(prevPledges).length) {
          oldUrl = this.url;
          this.url = "http://api.kivaws.org/v1/loans/" + (_.keys(prevPledges).join(',')) + ".json";
          return this.fetch({
            add: true,
            success: function() {
              var loan, _i, _len, _ref;
              _ref = _this.models;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                loan = _ref[_i];
                loan.set('pledge', prevPledges[loan.id]);
              }
              _this.url = oldUrl;
              return cb();
            }
          });
        } else {
          return cb();
        }
      } else {
        return cb();
      }
    };

    Loans.prototype.comparator = function(loan) {
      return 1 - loan.pledge();
    };

    Loans.prototype.pledgeTotal = function() {
      return _.reduce(this.models, function(runningTotal, loan) {
        return runningTotal + loan.pledge();
      }, 0);
    };

    Loans.prototype.pledgeCount = function() {
      return this.pledgedLoans().length;
    };

    Loans.prototype.pledgedLoans = function() {
      var filtered, sorted;
      filtered = _.filter(this.models, function(loan) {
        return loan.pledge() > 0;
      });
      return sorted = _.sortBy(filtered, function(loan) {
        return 100000000 - loan.pledge();
      });
    };

    Loans.prototype.pledgesToSave = function() {
      var p, pledges, _i, _len, _ref;
      pledges = {};
      _ref = this.pledgedLoans();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        pledges[p.id] = p.pledge();
      }
      return pledges;
    };

    Loans.prototype.loansWithNoPledge = function() {
      var filtered;
      return filtered = _.filter(this.models, function(loan) {
        return !loan.pledge();
      });
    };

    Loans.prototype.pledgeOrder = function(id) {
      var modelIds;
      modelIds = _.pluck(this.pledgedLoans(), 'id');
      return _.indexOf(modelIds, id);
    };

    Loans.prototype.recentLoans = function() {
      return this.where({
        isRecent: true
      });
    };

    Loans.prototype.newCount = function() {
      return (this.where({
        isRecent: true
      })).length;
    };

    Loans.prototype.filteredCollection = function(term) {
      var loansToSearch;
      this.term = term;
      loansToSearch = this.loansWithNoPledge();
      if (this.term) {
        return _.filter(loansToSearch, function(m) {
          return m.matches(this.term);
        });
      } else {
        return loansToSearch;
      }
    };

    Loans.prototype.parse = function(resp) {
      var keywords, l, loans, _i, _len, _ref, _ref1,
        _this = this;
      this.page++;
      this.resultsCount = (_ref = (_ref1 = resp.paging) != null ? _ref1.total : void 0) != null ? _ref : 0;
      this.trigger('update:resultsCount', this.resultsCount);
      loans = _.reject(resp.loans, function(l) {
        var _ref2;
        return _ref2 = l.id, __indexOf.call(_.pluck(_this.models, 'id'), _ref2) >= 0;
      });
      keywords = [];
      for (_i = 0, _len = loans.length; _i < _len; _i++) {
        l = loans[_i];
        l.pledge = 0;
        l.postedMoment = moment(l.posted_date).valueOf();
        keywords.push(l.sector, l.activity);
        if (l.postedMoment >= this.latestLoad) {
          l.isRecent = true;
        }
      }
      this.searchTypeAheadTerms = _.union(_.compact(keywords), this.searchTypeAheadTerms);
      this.trigger('search:addToTypeAhead', this.searchTypeAheadTerms);
      return loans;
    };

    Loans.prototype.submit = function(cb) {
      var myPledges, p;
      myPledges = (function() {
        var _i, _len, _ref, _results;
        _ref = this.pledgedLoans();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push({
            id: p.get('id'),
            amount: p.get('pledge')
          });
        }
        return _results;
      }).call(this);
      return $.post('/reqBin/11xkiun1', {
        loans: myPledges
      }, function(resp) {
        return cb(resp);
      });
    };

    Loans.prototype.submitToBasket = function() {
      var formEl, myPledges, p;
      myPledges = JSON.stringify((function() {
        var _i, _len, _ref, _results;
        _ref = this.pledgedLoans();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push({
            id: p.get('id'),
            amount: p.get('pledge')
          });
        }
        return _results;
      }).call(this));
      formEl = $('#submitToBasket');
      $(formEl).find('input[name="loans"]').val(myPledges);
      this.clearPledges();
      return wait(250, function() {
        return formEl[0].submit();
      });
    };

    Loans.prototype.clearPledges = function() {
      var l, _i, _len, _ref, _results;
      _ref = this.models;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        l.set('pledge', 0);
        _results.push(l.collection.trigger('pledge:save', l));
      }
      return _results;
    };

    Loans.prototype.getBorrowerInfo = function() {
      var _this = this;
      return wait(250, function() {
        var firstTenIds, loansToDo, url;
        loansToDo = _this.filter(function(l) {
          return !(l.get('borrowerInfo') != null);
        });
        if (loansToDo.length) {
          firstTenIds = _.pluck(_.first(loansToDo, 10), 'id');
          url = "http://api.kivaws.org/v1/loans/" + firstTenIds + ".json";
          return $.get(url, function(resp) {
            var loan, loans, _i, _len, _ref, _ref1;
            loans = resp.loans;
            for (_i = 0, _len = loans.length; _i < _len; _i++) {
              loan = loans[_i];
              _this.get(loan.id).set('borrowerInfo', (_ref = (_ref1 = loan.description.texts) != null ? _ref1.en : void 0) != null ? _ref : '');
            }
            return _this.getBorrowerInfo();
          });
        }
      });
    };

    return Loans;

  })(Backbone.Collection);

  Partner = (function(_super) {

    __extends(Partner, _super);

    function Partner() {
      return Partner.__super__.constructor.apply(this, arguments);
    }

    return Partner;

  })(Backbone.Model);

  Partners = (function(_super) {

    __extends(Partners, _super);

    function Partners() {
      return Partners.__super__.constructor.apply(this, arguments);
    }

    Partners.prototype.model = Partner;

    Partners.prototype.url = 'http://api.kivaws.org/v1/partners.json';

    Partners.prototype.keywords = {};

    Partners.prototype.parse = function(resp) {
      return resp.partners;
    };

    Partners.prototype.allCountries = function() {
      var _base, _ref;
      return (_ref = (_base = this.keywords).countries) != null ? _ref : _base.countries = _.uniq(_.pluck(_.flatten(this.pluck('countries')), 'name'));
    };

    Partners.prototype.allRegions = function() {
      var _base, _ref;
      return (_ref = (_base = this.keywords).regions) != null ? _ref : _base.regions = _.uniq(_.pluck(_.flatten(this.pluck('countries')), 'region'));
    };

    Partners.prototype.allNames = function() {
      var _base, _ref;
      return (_ref = (_base = this.keywords).names) != null ? _ref : _base.names = this.pluck('name');
    };

    return Partners;

  })(Backbone.Collection);

  TopBar = (function(_super) {

    __extends(TopBar, _super);

    function TopBar() {
      return TopBar.__super__.constructor.apply(this, arguments);
    }

    TopBar.prototype.el = '.navbar-fixed-top';

    TopBar.prototype.initialize = function() {
      var _this = this;
      $('#my-pledges').waypoint(function(ev, direction) {
        if (direction === 'up') {
          return _this.navChoose('my-pledges');
        }
      });
      return $('#find-loans').waypoint(function(ev, direction) {
        return _this.navChoose('find-loans');
      });
    };

    TopBar.prototype.navChoose = function(item) {
      $('#myNav li').removeClass('active');
      return $("#myNav li." + item).addClass('active');
    };

    TopBar.prototype.refreshScroll = function() {
      return $.waypoints('refresh');
    };

    TopBar.prototype.events = {
      'click li.my-pledges a': function() {
        $('body').scrollTop(-50);
        return this.navChoose('my-pledges');
      },
      'click li.find-loans': function() {
        this.navChoose('find-loans');
        $('body').scrollTop($('#find-loans').offset().top - 85);
        return $('.search').focus();
      },
      'click .submit-pledges': function() {
        return this.trigger('submit');
      }
    };

    TopBar.prototype.updatePledgeTotal = function(newCount, newAmount) {
      if (newCount === 0) {
        this.$('.pledges-header').slideUp();
      } else {
        this.$('.pledges-header').slideDown();
      }
      this.$('.submit-pledges h3').text("Submit " + newCount + " pledge" + (newCount > 1 ? 's' : '') + " totalling $ " + newAmount);
      return this;
    };

    TopBar.prototype.updateNewCount = function(newCount) {
      if (newCount === 0) {
        this.$('.find-loans .badge').text('0').fadeOut();
      } else {
        this.$('.find-loans .badge').fadeIn().text(newCount);
      }
      return this;
    };

    TopBar.prototype.toggleNewLoansLink = function(direction) {
      if (direction === 'up') {
        return this.$('.new-loans').hide();
      } else {
        return this.$('.new-loans').show();
      }
    };

    TopBar.prototype.message = function(message) {
      var msgEl, template,
        _this = this;
      template = function() {
        return div({
          "class": "alert" + (this.msg.type ? ' alert-' + this.msg.type : '')
        }, function() {
          if (this.msg.close) {
            a({
              href: '#',
              'data-dismiss': 'alert',
              "class": 'close'
            }, "&times;");
          }
          return text(this.msg.message);
        });
      };
      msgEl = this.$('.messageArea');
      msgEl.html(ck.render(template, {
        msg: message
      }));
      if (message.timeout) {
        return wait(message.timeout, function() {
          return _this.$('.alert').fadeOut('fast', function() {
            return _this.$('.alert').remove();
          });
        });
      }
    };

    TopBar.prototype.loadTypeAhead = function(keywords) {
      return $('input.search').typeahead({
        source: keywords
      });
    };

    return TopBar;

  })(Backbone.View);

  PledgesList = (function(_super) {

    __extends(PledgesList, _super);

    function PledgesList() {
      return PledgesList.__super__.constructor.apply(this, arguments);
    }

    PledgesList.prototype.el = '.pledges-list';

    PledgesList.prototype.initialize = function() {
      var _this = this;
      this.collection.on('pledge:save', function() {
        return _this.render();
      });
      return this.collection.on('remove', function() {
        if (_this.collection.pledgeCount() === 0) {
          _this.$('.intro th h4').text('You currently have no pledges. Pledge a loan to these partners by entering amounts to the right of their requests.');
          return _this.$('thead').show();
        }
      });
    };

    PledgesList.prototype.template = function() {
      return table({
        "class": 'table table-bordered'
      }, function() {
        if (this.pledgeCount === 0) {
          thead({
            "class": 'intro'
          }, function() {
            return tr(function() {
              return th({
                colspan: 4
              }, function() {
                return h4('Pledge a loan to these partners by entering amounts to the right of their requests.');
              });
            });
          });
        }
        return tbody({
          "class": 'pledges'
        }, function() {});
      });
    };

    PledgesList.prototype.render = function() {
      var pledge, _i, _len, _ref;
      this.$el.html(ck.render(this.template, {
        pledgeCount: this.collection.pledgeCount()
      }));
      _ref = this.collection.pledgedLoans();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pledge = _ref[_i];
        pledge.view.render().$el.appendTo(this.$('.pledges'));
        pledge.view.delegateEvents();
      }
      return this;
    };

    return PledgesList;

  })(Backbone.View);

  SearchView = (function(_super) {

    __extends(SearchView, _super);

    function SearchView() {
      return SearchView.__super__.constructor.apply(this, arguments);
    }

    SearchView.prototype.el = '.search-bar';

    SearchView.prototype.keywords = {};

    SearchView.prototype.initialize = function() {};

    SearchView.prototype.template = function() {
      a({
        id: 'yo'
      });
      return div({
        "class": 'navbar sub'
      }, function() {
        return div({
          "class": 'navbar-inner'
        }, function() {
          return div({
            "class": 'container'
          }, function() {
            form({
              "class": 'navbar-form pull-left'
            }, function() {
              div({
                "class": 'control-group search-container'
              }, function() {
                return div({
                  "class": 'input-prepend'
                }, function() {
                  span({
                    "class": 'add-on'
                  }, function() {
                    i({
                      "class": 'icon-search'
                    });
                    return img({
                      "class": 'wait',
                      src: 'img/wait.gif'
                    });
                  });
                  return input({
                    type: 'text',
                    placeholder: 'find kiva loans',
                    "class": 'span2 search search-query typeahead'
                  });
                });
              });
              span({
                "class": 'txt'
              }, 'that are');
              div({
                "class": 'btn-group status'
              }, function() {
                button({
                  "class": 'btn dropdown-toggle',
                  'data-toggle': 'dropdown'
                }, function() {
                  span({
                    "class": 'text'
                  }, 'still raising funds ');
                  return span({
                    "class": 'caret'
                  });
                });
                return ul({
                  "class": 'dropdown-menu'
                }, function() {
                  li(function() {
                    return a({
                      'data-value': 'fundraising'
                    }, 'still raising funds');
                  });
                  li(function() {
                    return a({
                      'data-value': 'funded'
                    }, 'funded');
                  });
                  return li(function() {
                    return a({
                      'data-value': 'almost funded'
                    }, 'almost funded');
                  });
                });
              });
              span({
                "class": 'txt'
              }, 'from');
              return div({
                "class": 'btn-group gender'
              }, function() {
                button({
                  "class": 'btn dropdown-toggle',
                  'data-toggle': 'dropdown'
                }, function() {
                  span({
                    "class": 'text'
                  }, 'women and men ');
                  return span({
                    "class": 'caret'
                  });
                });
                return ul({
                  "class": 'dropdown-menu'
                }, function() {
                  li(function() {
                    return a({
                      'data-value': 'female'
                    }, 'women only');
                  });
                  li(function() {
                    return a({
                      'data-value': 'male'
                    }, 'men only');
                  });
                  return li(function() {
                    return a({
                      'data-value': ''
                    }, 'women and men');
                  });
                });
              });
            });
            return span({
              "class": 'results-count pull-right'
            }, '');
          });
        });
      });
    };

    SearchView.prototype.events = {
      'change input.search': 'search',
      'click .gender a': 'setGender',
      'click .status a': 'setStatus'
    };

    SearchView.prototype.setGender = function(e) {
      this.options.gender = $(e.target).data('value');
      this.$('.gender .text').text($(e.target).text() + ' ');
      return this.search();
    };

    SearchView.prototype.setStatus = function(e) {
      this.options.status = $(e.target).data('value');
      this.$('.status .text').text($(e.target).text() + ' ');
      return this.search();
    };

    SearchView.prototype.search = function() {
      var _this = this;
      this.$('.icon-search').hide();
      this.$('img.wait').show();
      return this.trigger('search', this.makeUrl(), function() {
        _this.$('.icon-search').show();
        return _this.$('img.wait').hide();
      });
    };

    SearchView.prototype.updateResultsCount = function(newCount) {
      return this.$('.results-count').text("" + newCount + " loans found");
    };

    SearchView.prototype.allKeywords = function() {
      return _.flatten(_.values(this.keywords));
    };

    SearchView.prototype.makeUrl = function() {
      var url, _ref;
      url = "http://api.kivaws.org/v1/loans/search.json?q=" + (this.$('.search').val());
      url += this.options.gender ? "&gender=" + this.options.gender : '';
      url += (_ref = this.options.status) === 'funded' || _ref === 'fundraising' ? "&status=" + this.options.status : '';
      url += this.options.status === 'almost funded' ? "&sortby=amount_remaining" : '';
      return url;
    };

    SearchView.prototype.resetTypeAhead = function() {
      return this.$('input.search').typeahead({
        source: this.allKeywords()
      });
    };

    SearchView.prototype.render = function() {
      this.$el.html(ck.render(this.template));
      this.$('#yo').waypoint(function(e, direction) {
        if (direction === 'down') {
          return $('.search-bar .navbar').addClass('fixed');
        } else {
          return $('.search-bar .navbar').removeClass('fixed');
        }
      }, {
        offset: 65
      });
      return this;
    };

    return SearchView;

  })(Backbone.View);

  LoansList = (function(_super) {

    __extends(LoansList, _super);

    function LoansList() {
      return LoansList.__super__.constructor.apply(this, arguments);
    }

    LoansList.prototype.el = '.loans-list';

    LoansList.prototype.initialize = function() {
      var _this = this;
      this.searchTerm = '';
      this.collection.on('reset', function() {
        return _this.render();
      });
      this.collection.on('add', function(m) {
        if (m.get('isRecent')) {
          return _this.updateNewCount();
        } else {
          return _this.addLoanView(m);
        }
      });
      return this.collection.on('remove', function(m) {
        return m.view.remove();
      });
    };

    LoansList.prototype.template = function() {
      div({
        "class": 'alert alert-info newCount'
      }, function() {});
      return table({
        "class": 'table table-bordered'
      }, function() {
        tbody({
          "class": 'loans'
        }, function() {});
        return tfoot({
          "class": 'progress-container'
        }, function() {});
      });
    };

    LoansList.prototype.updateNewCount = function() {
      var newCount,
        _this = this;
      newCount = this.collection.newCount();
      this.$('.newCount').text("" + newCount + " new loans were posted. Click here to view them.");
      this.$('.newCount').fadeIn().click(function() {
        _this.$('.newCount').fadeOut();
        _this.addNewLoans();
        return _this.collection.trigger('update:newCount', 0);
      });
      return this.collection.trigger('update:newCount', newCount);
    };

    LoansList.prototype.addNewLoans = function() {
      var loan, _i, _len, _ref, _results;
      _ref = this.collection.recentLoans();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        loan = _ref[_i];
        this.addLoanView(loan);
        _results.push(this.trigger('cleared:recentLoans'));
      }
      return _results;
    };

    LoansList.prototype.render = function() {
      var loan, _i, _len, _ref;
      this.$el.html(ck.render(this.template));
      _ref = this.collection.loansWithNoPledge();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        loan = _ref[_i];
        this.addLoanView(loan);
      }
      this.addScrollTrigger();
      return this;
    };

    LoansList.prototype.loadMore = function() {
      var _this = this;
      this.collection.fetch({
        add: true,
        data: {
          page: this.collection.page
        },
        success: function() {
          return _this.collection.getBorrowerInfo();
        }
      });
      return this.addScrollTrigger();
    };

    LoansList.prototype.scrollTriggerTemplate = function() {
      return tr(function() {
        return td({
          colspan: 4
        }, function() {
          return div({
            id: 'more',
            "class": 'progress progress-success progress-striped active'
          }, function() {
            return div({
              "class": 'bar',
              style: 'width: 100%'
            });
          });
        });
      });
    };

    LoansList.prototype.addScrollTrigger = function() {
      var _this = this;
      this.$('.progress-container').html(ck.render(this.scrollTriggerTemplate));
      this.$('#more').waypoint('destroy');
      $.waypoints('refresh');
      return wait(1000, function() {
        return _this.$('#more').waypoint(function() {
          return _this.loadMore();
        }, {
          'offset': '100%'
        });
      });
    };

    LoansList.prototype.addLoanView = function(loan) {
      var v, _ref;
      v = (_ref = loan.view) != null ? _ref : loan.view = (new LoanView({
        model: loan
      })).remove();
      v.render();
      if (loan.get('isRecent')) {
        v.$el.prependTo(this.$('.loans'));
        v.$el.addClass('hl');
        wait(1000, function() {
          return loan.view.$el.removeClass('hl');
        });
        loan.set('isRecent', false);
      } else {
        v.$el.appendTo(this.$('.loans'));
      }
      return v.delegateEvents();
    };

    return LoansList;

  })(Backbone.View);

  LoanView = (function(_super) {

    __extends(LoanView, _super);

    function LoanView() {
      return LoanView.__super__.constructor.apply(this, arguments);
    }

    LoanView.prototype.className = 'loan-view';

    LoanView.prototype.tagName = 'tr';

    LoanView.prototype.initialize = function() {
      var _this = this;
      this.model.on('error', function(error) {
        _this.$('.pledge-control').removeClass('success').addClass('error');
        return _this.$('.with-help-suffix').hide();
      });
      this.model.on('change', function(m) {
        return _this.updateProgress();
      });
      return this.model.on('change:borrowerInfo', function(m) {
        _this.$('.pop').fadeIn();
        _this.$('.more-info').text(_this.model.get('borrowerInfo'));
        return _this.initBorrowerInfo();
      });
    };

    LoanView.prototype.initBorrowerInfo = function() {
      var _this = this;
      this.$('.more-info-cont').fadeIn();
      return this.$('.profile-icon, .pop, .more-info-cont').addClass('active').click(function() {
        return _this.borrowerInfoView.render();
      });
    };

    LoanView.prototype.template = function() {
      td({
        "class": 'main-info'
      }, function() {
        div({
          "class": 'info-cont'
        }, function() {
          div({
            "class": 'location bob'
          }, function() {
            i({
              "class": "" + (this.loan.countryCode().toLowerCase()) + " flag"
            });
            return div("" + (this.loan.get('location').country));
          });
          div({
            "class": 'profile-icon'
          }, function() {
            return img({
              src: "" + (this.loan.profileImage())
            });
          });
          return div({
            "class": 'info'
          }, function() {
            span({
              "class": 'pop'
            }, function() {
              return i({
                "class": 'icon-info-sign icon-white'
              });
            });
            span({
              "class": 'name'
            }, "" + (this.loan.get('name')));
            div({
              "class": 'activity'
            }, "" + (this.loan.sectorActivity()));
            return div({
              "class": 'more-info-cont'
            }, function() {
              var _ref;
              div({
                "class": 'more-info'
              }, "" + ((_ref = this.loan.get('borrowerInfo')) != null ? _ref : ''));
              return div({
                "class": 'label label-small read-more'
              }, 'read more &darr;');
            });
          });
        });
        return div({
          "class": 'time-posted'
        }, function() {
          return em("posted " + (moment(this.loan.get('postedMoment')).fromNow()));
        });
      });
      td(function() {
        div({
          "class": 'needed'
        }, "$ " + (this.loan.get('loan_amount')));
        return div({
          "class": 'use'
        }, "" + (this.loan.get('use')));
      });
      td({
        "class": 'status'
      }, function() {
        div(function() {
          span({
            "class": 'perc-funded'
          }, "" + (this.loan.percFunded()) + " %");
          return span({
            "class": 'funded'
          }, function() {
            div("funded" + (this.loan.percFunded() === 100 ? ' so far' : ''));
            return div({
              "class": 'with-help-suffix'
            }, 'with your help!');
          });
        });
        return div({
          "class": 'progress progress-success'
        }, function() {
          return div({
            "class": 'bar',
            style: "width: " + (this.loan.percFunded()) + "%;"
          });
        });
      });
      return td({
        "class": 'pledge-area'
      }, function() {
        return div({
          "class": "control-group pledge-control" + (this.loan.pledge() ? ' success' : '')
        }, function() {
          return div({
            "class": 'control'
          }, function() {
            return div({
              "class": 'input-prepend input-append'
            }, function() {
              var _ref;
              span({
                "class": 'add-on'
              }, '$');
              return input({
                type: 'text',
                "class": 'pledge span2',
                size: '24',
                value: (_ref = this.loan.pledge()) != null ? _ref : '',
                placeholder: 'your pledge'
              });
            });
          });
        });
      });
    };

    LoanView.prototype.events = {
      'keyup .pledge': 'update',
      'change .pledge': 'saveChange'
    };

    LoanView.prototype.updateProgress = function() {
      var funded;
      funded = this.model.percFunded(this.model.pledge());
      this.$('.perc-funded').text("" + funded + " %");
      this.$('.progress .bar').width("" + funded + "%");
      this.$('.pledge-control').removeClass('error');
      if (this.model.pledge()) {
        this.$('.with-help-suffix').show();
        return this.$('.pledge-control').addClass('success');
      } else {
        this.$('.with-help-suffix').hide();
        return this.$('.pledge-control').removeClass('success');
      }
    };

    LoanView.prototype.update = function(e) {
      return this.model.set('pledge', this.$('input.pledge').val() || 0);
    };

    LoanView.prototype.saveChange = function(e) {
      if ($('.pledge-control').hasClass('error')) {
        $('.pledge-control').removeClass('error');
        return this.$('.pledge').val('');
      } else {
        if (!this.model.pledge()) {
          this.$('.pledge').val('');
        }
        return this.model.collection.trigger('pledge:save', this.model);
      }
    };

    LoanView.prototype.render = function() {
      var _this = this;
      this.$el.html(ck.render(this.template, {
        loan: this.model
      }));
      this.updateProgress();
      if (this.model.get('borrowerInfo')) {
        this.initBorrowerInfo();
      }
      this.borrowerInfoView = new BorrowerInfoView({
        model: this.model
      });
      this.locationInfoView = new WikiView({
        model: this.model
      });
      this.$('.location').click(function() {
        return _this.locationInfoView.render();
      });
      return this;
    };

    return LoanView;

  })(Backbone.View);

  WikiView = (function(_super) {

    __extends(WikiView, _super);

    function WikiView() {
      return WikiView.__super__.constructor.apply(this, arguments);
    }

    WikiView.prototype.className = 'modal location-map';

    WikiView.prototype.tagName = 'div';

    WikiView.prototype.template = function() {
      return div({
        "class": 'modal hide',
        'data-toggle': 'modal'
      }, function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3("" + (this.loan.place()) + " ");
        });
        div({
          "class": 'modal-body'
        }, function() {
          return iframe({
            width: '100%',
            height: '100%',
            frameborder: '0',
            marginheight: '0',
            marginwidth: '0',
            src: "http://en.m.wikipedia.org/wiki/" + (this.loan.get('location').country) + "#firstHeading"
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return a({
            href: '#',
            "class": 'btn btn-success',
            'data-dismiss': 'modal'
          }, 'close');
        });
      });
    };

    WikiView.prototype.render = function() {
      this.$el.html(ck.render(this.template, {
        loan: this.model
      }));
      this.$el.appendTo('.main');
      this.$('.modal').modal('show');
      return this;
    };

    return WikiView;

  })(Backbone.View);

  BorrowerInfoView = (function(_super) {

    __extends(BorrowerInfoView, _super);

    function BorrowerInfoView() {
      return BorrowerInfoView.__super__.constructor.apply(this, arguments);
    }

    BorrowerInfoView.prototype.className = 'borrower-info';

    BorrowerInfoView.prototype.tagName = 'div';

    BorrowerInfoView.prototype.template = function() {
      return div({
        "class": 'modal hide',
        'data-toggle': 'modal'
      }, function() {
        div({
          "class": 'modal-header'
        }, function() {
          return h3("" + (this.loan.get('name')) + " ");
        });
        div({
          "class": 'modal-body'
        }, function() {
          img({
            src: "" + (this.loan.profileImageLarge())
          });
          p("" + (this.loan.get('borrowerInfo')));
          return div(function() {
            return table({
              "class": 'table'
            }, function() {
              tr(function() {
                td('Partner: ');
                return td("" + (this.partner.get('name')));
              });
              tr(function() {
                td('Loans posted by partner:');
                return td("" + (this.partner.get('loans_posted')));
              });
              tr(function() {
                td('Delinquency rate: ');
                return td("" + (this.loan.pDelinquency()));
              });
              tr(function() {
                td('Default rate:');
                return td("" + (this.loan.pDefault()));
              });
              return tr(function() {
                td('Rating');
                return td("" + (this.partner.get('rating')));
              });
            });
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          return a({
            href: '#',
            "class": 'btn btn-success',
            'data-dismiss': 'modal'
          }, 'close');
        });
      });
    };

    BorrowerInfoView.prototype.render = function() {
      this.$el.html(ck.render(this.template, {
        loan: this.model,
        partner: this.model.partner()
      }));
      this.$el.appendTo('.main');
      this.$('.modal').modal('show');
      return this;
    };

    return BorrowerInfoView;

  })(Backbone.View);

  ThanksView = (function(_super) {

    __extends(ThanksView, _super);

    function ThanksView() {
      return ThanksView.__super__.constructor.apply(this, arguments);
    }

    ThanksView.prototype.className = 'modal hide fade';

    ThanksView.prototype.id = 'thanks';

    ThanksView.prototype.tagName = 'div';

    ThanksView.prototype.template = function() {
      div({
        "class": 'modal-header'
      }, function() {
        return h3('Thank you for helping!');
      });
      div({
        "class": 'modal-body'
      }, function() {
        h3('Here is the receipt on requestb.in:');
        a({
          "class": 'btn btn-info',
          href: 'http://requestb.in/11xkiun1?inspect',
          target: '_blank'
        }, 'http://requestb.in/11xkiun1?inspect');
        h3('Or... take it to a real, live Kiva Basket:');
        return a({
          "class": 'btn btn-warning submitToBasket'
        }, function() {
          i({
            "class": 'icon-shopping-cart icon-white'
          });
          return span('take me there!');
        });
      });
      return div({
        "class": 'modal-footer'
      }, function() {
        return a({
          href: '#',
          "class": 'btn btn-success',
          'data-dismiss': 'modal'
        }, 'browse more loans');
      });
    };

    ThanksView.prototype.render = function() {
      var _this = this;
      this.$el.html(ck.render(this.template));
      this.$el.appendTo('.main');
      this.$el.modal('show');
      $('#thanks .submitToBasket').click(function() {
        return _this.trigger('toBasket');
      });
      return this;
    };

    return ThanksView;

  })(Backbone.View);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.initialize = function() {
      this.topBar = new TopBar();
      this.searchBar = new SearchView();
      this.loans = new Loans();
      this.partners = new Partners();
      this.loansList = new LoansList({
        collection: this.loans
      });
      this.pledgesList = new PledgesList({
        collection: this.loans
      });
      return this.thanksView = new ThanksView();
    };

    Router.prototype.eventController = function() {
      var _this = this;
      this.loans.on('update:pledgeTotal', function(newCount, newVal) {
        return _this.topBar.updatePledgeTotal(newCount, newVal);
      });
      this.loans.on('pledge:save', function(p) {
        var _ref;
        if ((_ref = _this.pledgeList) == null) {
          _this.pledgeList = new PledgesList({
            collection: _this.loans
          });
        }
        return _this.pledgeList.render();
      });
      this.loans.on('update:resultsCount', function(newCount) {
        return _this.searchBar.updateResultsCount(newCount);
      });
      this.loans.on('update:newCount', function(newCount) {
        return _this.topBar.updateNewCount(newCount);
      });
      this.loans.on('add:newLoans', function() {
        return this.topBar.clearNewCount();
      });
      this.topBar.on('submit', function() {
        return _this.loans.submit(function(resp) {
          return _this.thanksView.render();
        });
      });
      this.thanksView.on('toBasket', function() {
        return _this.loans.submitToBasket();
      });
      return this.searchBar.on('search', function(url, done) {
        _this.loans.url = url;
        _this.loans.page = 1;
        return _this.loans.fetch({
          success: function() {
            done();
            return _this.loans.getBorrowerInfo();
          }
        });
      });
    };

    Router.prototype.restorePledges = function() {
      var _this = this;
      return this.loans.restorePledges(function() {
        _this.pledgesList.render();
        return _this.loans.fetch({
          add: true,
          success: function() {
            _this.loans.getBorrowerInfo();
            _this.loansList.render();
            return _this.topBar.refreshScroll();
          }
        });
      });
    };

    Router.prototype.populateTypeahead = function() {
      var _this = this;
      return this.partners.fetch({
        success: function() {
          _.extend(_this.searchBar.keywords, {
            countries: _this.partners.allCountries(),
            regions: _this.partners.allRegions(),
            partners: _this.partners.allNames()
          });
          return _this.searchBar.resetTypeAhead();
        }
      });
    };

    Router.prototype.routes = {
      '': 'home'
    };

    Router.prototype.home = function() {
      this.restorePledges();
      this.searchBar.render();
      this.populateTypeahead();
      return this.eventController();
    };

    return Router;

  })(Backbone.Router);

  w.ck = CoffeeKup;

  w.app = new Router();

  $(function() {
    return Backbone.history.start();
  });

}).call(this);
