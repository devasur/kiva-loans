// Generated by CoffeeScript 1.3.3
(function() {
  var Loan, LoanView, Loans, LoansList, Router, TopBar, w,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  w = window;

  Backbone.View.prototype.open = function(parentEl) {
    if (parentEl == null) {
      parentEl = '.main';
    }
    this.$el.appendTo(parentEl);
    return this;
  };

  w.wait = function(someTime, thenDo) {
    return setTimeout(thenDo, someTime);
  };

  w.doEvery = function(someTime, action) {
    return setInterval(action, someTime);
  };

  Loan = (function(_super) {

    __extends(Loan, _super);

    function Loan() {
      return Loan.__super__.constructor.apply(this, arguments);
    }

    Loan.prototype.initialize = function() {
      var _this = this;
      return this.on('change:pledge', function() {
        return _this.collection.trigger('update:pledgeTotal', _this.collection.pledgeTotal());
      });
    };

    Loan.prototype.profileImage = function() {
      return "http://www.kiva.org/img/s100/" + (this.get('image').id) + ".jpg";
    };

    Loan.prototype.flagImage = function() {
      return "/flag/" + (this.get('location').country_code);
    };

    Loan.prototype.percFunded = function(withHelp) {
      if (withHelp == null) {
        withHelp = 0;
      }
      return Math.floor((this.get('funded_amount') + withHelp) * 100 / this.get('loan_amount'));
    };

    Loan.prototype.getPledge = function() {
      return parseInt(this.get('pledge'), 10);
    };

    Loan.prototype.validate = function(attrs) {
      var ok;
      ok = /(''|^[0-9]+$)/.test(attrs.pledge);
      if (!ok) {
        return 'not a number';
      }
    };

    Loan.prototype.matches = function(term) {
      var fieldsToSearch, re;
      re = RegExp(term, 'gi');
      fieldsToSearch = this.get('name') + this.get('activity') + this.get('use') + this.get('country');
      return re.test(fieldsToSearch);
    };

    return Loan;

  })(Backbone.Model);

  Loans = (function(_super) {

    __extends(Loans, _super);

    function Loans() {
      return Loans.__super__.constructor.apply(this, arguments);
    }

    Loans.prototype.model = Loan;

    Loans.prototype.url = 'http://api.kivaws.org/v1/loans/newest.json';

    Loans.prototype.initialize = function() {
      var checkForNewLoans,
        _this = this;
      this.latestLoad = moment().valueOf();
      this.page = 1;
      return checkForNewLoans = doEvery(10000, function() {
        return _this.fetch({
          add: true
        });
      });
    };

    Loans.prototype.comparator = function(loan) {
      console.log('sorting');
      return 1 / parseInt(loan.get('postedMoment'), 10);
    };

    Loans.prototype.pledgeTotal = function() {
      return _.reduce(this.models, function(runningTotal, loan) {
        return runningTotal + loan.getPledge();
      }, 0);
    };

    Loans.prototype.pledgedLoans = function() {
      var filtered, sorted;
      filtered = _.filter(this.models, function(loan) {
        return loan.getPledge() > 0;
      });
      return sorted = _.sortBy(filtered, function(loan) {
        return 100000000 - loan.getPledge();
      });
    };

    Loans.prototype.loansWithNoPledge = function() {
      var filtered;
      return filtered = _.filter(this.models, function(loan) {
        return !loan.getPledge();
      });
    };

    Loans.prototype.pledgeOrder = function(id) {
      var modelIds;
      modelIds = _.pluck(this.pledgedLoans(), 'id');
      return _.indexOf(modelIds, id);
    };

    Loans.prototype.recentLoans = function() {
      return this.where({
        isRecent: true
      });
    };

    Loans.prototype.recentCount = function() {
      return (this.where({
        isRecent: true
      })).length;
    };

    Loans.prototype.filteredCollection = function(term) {
      var loansToSearch;
      loansToSearch = this.loansWithNoPledge();
      if (term) {
        return _.filter(loansToSearch, function(m) {
          return m.matches(term);
        });
      } else {
        return loansToSearch;
      }
    };

    Loans.prototype.parse = function(resp) {
      var l, loans, _i, _len,
        _this = this;
      this.page++;
      console.log('incoming: ', resp.loans);
      loans = _.reject(resp.loans, function(l) {
        var _ref;
        return _ref = l.id, __indexOf.call(_.pluck(_this.models, 'id'), _ref) >= 0;
      });
      for (_i = 0, _len = loans.length; _i < _len; _i++) {
        l = loans[_i];
        l.pledge = 0;
        l.postedMoment = moment(l.posted_date).valueOf();
        if (l.postedMoment >= this.latestLoad) {
          l.isRecent = true;
        }
      }
      console.log('filtered/parsed: ', loans);
      return loans;
    };

    return Loans;

  })(Backbone.Collection);

  LoansList = (function(_super) {

    __extends(LoansList, _super);

    function LoansList() {
      return LoansList.__super__.constructor.apply(this, arguments);
    }

    LoansList.prototype.className = 'loansList';

    LoansList.prototype.tagName = 'div';

    LoansList.prototype.initialize = function() {
      var _this = this;
      this.searchTerm = '';
      this.collection.on('reset', function() {
        return _this.render();
      });
      this.collection.on('add', function(m) {
        console.log('added: ', m);
        if (m.get('isRecent')) {
          return _this.updateRecentCount();
        } else {
          return _this.addLoanView(m);
        }
      });
      this.collection.on('remove', function(m) {
        return m.view.remove();
      });
      return this.collection.on('pledge:save', function(m) {
        _this.collection.sort({
          silent: true
        });
        return _this.renderPledges();
      });
    };

    LoansList.prototype.template = function() {
      table({
        "class": 'table table-bordered'
      }, function() {
        return tbody({
          "class": 'pledges'
        }, function() {
          return tr(function() {
            return td({
              colspan: 4
            }, function() {
              return div({
                id: 'pl'
              });
            });
          });
        });
      });
      div({
        "class": 'alert alert-info recentCount'
      }, function() {});
      return table({
        "class": 'table table-bordered'
      }, function() {
        tbody({
          "class": 'loans'
        }, function() {});
        return tfoot({
          "class": 'progress-container'
        }, function() {});
      });
    };

    LoansList.prototype.updateRecentCount = function() {
      var newCount,
        _this = this;
      console.log(newCount = this.collection.recentCount());
      this.$('.recentCount').text("" + newCount + " new loans were posted. Click here to view them.");
      return this.$('.recentCount').fadeIn().click(function() {
        _this.$('.recentCount').fadeOut();
        return _this.addNewLoans();
      });
    };

    LoansList.prototype.addNewLoans = function() {
      var loan, _i, _len, _ref, _results;
      _ref = this.collection.recentLoans();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        loan = _ref[_i];
        _results.push(this.addLoanView(loan));
      }
      return _results;
    };

    LoansList.prototype.render = function() {
      var loan, _i, _len, _ref,
        _this = this;
      console.log('this obj', this);
      this.$el.html(ck.render(this.template));
      _ref = this.collection.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        loan = _ref[_i];
        this.addLoanView(loan);
      }
      this.$('.pledges').waypoint(function(ev, direction) {
        console.log('wp', direction);
        return _this.trigger('pledge:scrollPast', direction);
      });
      this.addScrollTrigger();
      return this;
    };

    LoansList.prototype.loadMore = function() {
      this.collection.fetch({
        add: true,
        data: {
          page: this.collection.page
        }
      });
      return this.addScrollTrigger();
    };

    LoansList.prototype.scrollTriggerTemplate = function() {
      return tr(function() {
        return td({
          colspan: 4
        }, function() {
          return div({
            id: 'more',
            "class": 'progress progress-success progress-striped active'
          }, function() {
            return div({
              "class": 'bar',
              style: 'width: 100%'
            });
          });
        });
      });
    };

    LoansList.prototype.addScrollTrigger = function() {
      var _this = this;
      this.$('tfoot.progress-container').html(ck.render(this.scrollTriggerTemplate));
      return this.$('tfoot.progress-container').click(function() {
        return _this.loadMore();
      });
      /*
          wait 1000, =>
            @$('#more').waypoint('destroy')
            $.waypoints('refresh')
            
            # lazy load older loans on scroll to bottom of page
            @$('#more').waypoint => 
              @loadMore()
            , { 'offset': '100%' }
      */

    };

    LoansList.prototype.renderPledges = function() {
      var pledge, _i, _len, _ref;
      this.$('.pledges').html('');
      _ref = this.collection.pledgedLoans();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pledge = _ref[_i];
        this.addLoanView(pledge);
      }
      return this;
    };

    LoansList.prototype.renderLoans = function() {
      var loan, _i, _len, _ref;
      this.$('.loans').html('');
      _ref = this.collection.filteredCollection(this.searchTerm);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        loan = _ref[_i];
        this.addLoanView(loan);
      }
      return this;
    };

    LoansList.prototype.doSearch = function(searchTerm) {
      this.searchTerm = searchTerm;
      return this.renderLoans();
    };

    LoansList.prototype.addLoanView = function(loan) {
      var v, _ref,
        _this = this;
      v = (_ref = loan.view) != null ? _ref : loan.view = (new LoanView({
        model: loan
      })).remove();
      v.render();
      if (loan.getPledge()) {
        v.$el.appendTo(this.$('.pledges'));
      } else if (loan.matches(this.searchTerm)) {
        if (loan.get('isRecent')) {
          v.$el.prependTo(this.$('.loans'));
          v.$el.addClass('hl');
          wait(1000, function() {
            return loan.view.$el.removeClass('hl');
          });
          loan.set('isRecent', false);
        } else {
          v.$el.appendTo(this.$('.loans'));
        }
      }
      v.delegateEvents();
      return loan.view.on('all', function(event, data) {
        console.log('bubbling', event, data);
        return _this.trigger(event, data);
      });
    };

    return LoansList;

  })(Backbone.View);

  LoanView = (function(_super) {

    __extends(LoanView, _super);

    function LoanView() {
      return LoanView.__super__.constructor.apply(this, arguments);
    }

    LoanView.prototype.className = 'loanView';

    LoanView.prototype.tagName = 'tr';

    LoanView.prototype.initialize = function() {
      var _this = this;
      this.model.on('error', function(error) {
        console.log('model error');
        _this.$('.pledge-control').removeClass('success').addClass('error');
        return _this.$('.with-help-suffix').hide();
      });
      return this.model.on('change', function(m) {
        console.log('model changed');
        return _this.updateProgress();
      });
    };

    LoanView.prototype.template = function() {
      td({
        "class": 'main-info'
      }, function() {
        div({
          "class": 'location'
        }, function() {
          div("" + (this.loan.get('location').country));
          return img({
            "class": 'flag',
            src: "" + (this.loan.flagImage())
          });
        });
        div({
          "class": 'profile-icon'
        }, function() {
          return img({
            src: "" + (this.loan.profileImage())
          });
        });
        return div({
          "class": 'info'
        }, function() {
          div({
            "class": 'name'
          }, "" + (this.loan.get('name')));
          div({
            "class": 'activity'
          }, "" + (this.loan.get('activity')));
          return div({
            "class": 'use'
          }, "" + (this.loan.get('use')));
        });
      });
      td({
        "class": 'needed'
      }, "$ " + (this.loan.get('loan_amount')));
      td({
        "class": 'status'
      }, function() {
        div(function() {
          span({
            "class": 'perc-funded'
          }, "" + (this.loan.percFunded()) + " %");
          return span({
            "class": 'funded'
          }, function() {
            div('funded so far');
            return div({
              "class": 'with-help-suffix'
            }, 'with your help!');
          });
        });
        return div({
          "class": 'progress progress-success'
        }, function() {
          return div({
            "class": 'bar',
            style: "width: " + (this.loan.percFunded()) + "%;"
          });
        });
      });
      return td({
        "class": 'pledge-area'
      }, function() {
        return div({
          "class": "control-group pledge-control" + (this.loan.getPledge() ? ' success' : '')
        }, function() {
          return div({
            "class": 'control'
          }, function() {
            return div({
              "class": 'input-prepend input-append'
            }, function() {
              var _ref;
              span({
                "class": 'add-on'
              }, '$');
              return input({
                type: 'text',
                "class": 'pledge span2',
                size: '24',
                value: (_ref = this.loan.getPledge()) != null ? _ref : '',
                placeholder: 'your pledge'
              });
            });
          });
        });
      });
    };

    LoanView.prototype.events = {
      'keyup .pledge': 'update',
      'change .pledge': 'saveChange'
    };

    LoanView.prototype.updateProgress = function() {
      var funded;
      funded = this.model.percFunded(this.model.getPledge());
      this.$('.perc-funded').text("" + funded + " %");
      this.$('.progress .bar').width("" + funded + "%");
      this.$('.pledge-control').removeClass('error');
      if (this.model.getPledge()) {
        this.$('.with-help-suffix').show();
        return this.$('.pledge-control').addClass('success');
      } else {
        this.$('.with-help-suffix').hide();
        return this.$('.pledge-control').removeClass('success');
      }
    };

    LoanView.prototype.update = function(e) {
      var prevVal;
      prevVal = this.model.getPledge();
      this.model.set('pledge', this.$('input.pledge').val() || 0);
      return this.model.lastChangeIsPositive = this.model.getPledge() > prevVal;
    };

    LoanView.prototype.saveChange = function(e) {
      if ($('.pledge-control').hasClass('error')) {
        $('.pledge-control').removeClass('error');
        return this.$('.pledge').val('');
      } else {
        if (!this.model.getPledge()) {
          this.$('.pledge').val('');
        }
        if (this.model.lastChangeIsPositive) {
          this.trigger('message', {
            message: '<strong>Thank you!</strong>',
            timeout: 2000,
            type: 'success'
          });
        }
        return this.model.collection.trigger('pledge:save', this.model);
      }
    };

    LoanView.prototype.render = function() {
      this.$el.html(ck.render(this.template, {
        loan: this.model
      }));
      this.updateProgress();
      return this;
    };

    return LoanView;

  })(Backbone.View);

  TopBar = (function(_super) {

    __extends(TopBar, _super);

    function TopBar() {
      return TopBar.__super__.constructor.apply(this, arguments);
    }

    TopBar.prototype.el = '.navbar-fixed-top';

    TopBar.prototype.events = {
      'keyup .search': 'searchKeyPress',
      'click .pledges-header': function() {
        return $('body').scrollTop(-50);
      }
    };

    TopBar.prototype.searchKeyPress = function(e) {
      var search,
        _this = this;
      search = function() {
        return _this.trigger('search', $(e.target).val());
      };
      clearTimeout(this.searchTimeout);
      if (e.which === 13) {
        return search();
      } else {
        return this.searchTimeout = wait(500, function() {
          return search();
        });
      }
    };

    TopBar.prototype.updatePledgeTotal = function(newAmount) {
      this.$('.pledge-total').text(newAmount);
      return this;
    };

    TopBar.prototype.togglePledgeLink = function(direction) {
      if (direction === 'up') {
        return this.$('.pledge-link').hide();
      } else {
        return this.$('.pledge-link').show();
      }
    };

    TopBar.prototype.message = function(message) {
      var msgEl, template,
        _this = this;
      template = function() {
        return div({
          "class": "alert" + (this.msg.type ? ' alert-' + this.msg.type : '')
        }, function() {
          if (this.msg.close) {
            a({
              href: '#',
              'data-dismiss': 'alert',
              "class": 'close'
            }, "&times;");
          }
          return text(this.msg.message);
        });
      };
      msgEl = this.$('.messageArea');
      msgEl.html(ck.render(template, {
        msg: message
      }));
      if (message.timeout) {
        return wait(message.timeout, function() {
          return _this.$('.alert').fadeOut('fast', function() {
            return _this.$('.alert').remove();
          });
        });
      }
    };

    return TopBar;

  })(Backbone.View);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.initialize = function() {
      var _this = this;
      this.loans = new Loans();
      this.topBar = new TopBar();
      this.loansList = new LoansList({
        collection: this.loans
      });
      this.loans.fetch();
      this.loans.on('update:pledgeTotal', function(newVal) {
        return _this.topBar.updatePledgeTotal(newVal);
      });
      this.loansList.on('pledge:scrollPast', function(direction) {
        return _this.topBar.togglePledgeLink(direction);
      });
      return this.topBar.on('search', function(term) {
        return _this.loansList.doSearch(term);
      });
    };

    Router.prototype.routes = {
      '': 'home'
    };

    Router.prototype.home = function() {
      return this.loansList.render().open();
    };

    return Router;

  })(Backbone.Router);

  w.ck = CoffeeKup;

  w.app = new Router();

  $(function() {
    return Backbone.history.start();
  });

}).call(this);
